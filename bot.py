import os
import json
import asyncio
import aiohttp
import logging
from datetime import datetime
import time

# Configuration
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN', '')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID', '')
STEAM_API_KEY = os.environ.get('STEAM_API_KEY', '')

# Aggressive but safe rate limiting for speed
MAX_CONCURRENT_REQUESTS = 100  # High concurrency
REQUEST_DELAY = 0.1  # Very short delay
BATCH_SIZE = 200  # Larger batches
BATCH_DELAY = 2  # Short delay between batches
STEAM_ACCOUNTS = [

    '76561199791571656','76561199791607888','76561199785198981','76561199791683799','76561199791485513','76561199791069280',
    '76561199791592113','76561199791288922','76561199791781972','76561199785503677','76561199791597985','76561199791646194',
    '76561199791907537','76561199791719111','76561199791470144','76561199792293945','76561199791610292','76561199790536635',
    '76561199785522496','76561199791403388','76561199785640954','76561199785928562','76561199793113324','76561199792152016',
    '76561199785277666','76561199791756311','76561199791487425','76561199785154507','76561199793054808','76561199785787999',
    '76561199791936118','76561199784931901','76561199785337948','76561199792612505','76561199792477979','76561199792175694',
    '76561199791867212','76561199791767872','76561199791419761','76561199791778077','76561199792183487','76561199791603575',
    '76561199791970338','76561199791819355','76561199791923891','76561199791266772','76561199785696340','76561199791952510',
    '76561199790674159','76561199785479076','76561199792360907','76561199791953670','76561199791715917','76561199791697453',
    '76561199791388201','76561199791717639','76561199791755880','76561199791998769','76561199792049843','76561199791730726',
    '76561199791830002','76561199791502369','76561199792071495','76561199792156728','76561199791652795','76561199785473336',
    '76561199790396061','76561199791923895','76561199792089750','76561199792439750','76561199791417253','76561199791778879',
    '76561199792370607','76561199791525356','76561199785994585','76561199785691251','76561199791945061','76561199792198585',
    '76561199791810182','76561199785793662','76561199791988885','76561199791645531','76561199791331305','76561199791853276',
    '76561199793273622','76561199791883224','76561199791793135','76561199785347322','76561199792095182','76561199792208193',
    '76561199791362191','76561199792384178','76561199792539175','76561199791643139','76561199792313356','76561199791802428',
    '76561199791553993','76561199791988995','76561199791319816','76561199791390852','76561199791334784','76561199785571555',
    '76561199790825927','76561199784725376','76561199791743812','76561199791533670','76561199791459040','76561199792649601',
    '76561199791652795','76561199791923891','76561199791155698','76561199792370607','76561199792240143','76561199785530312',
    '76561199785522332','76561199792179028','76561199791068771','76561199791707695','76561199791955178','76561199791932997',
    '76561199790879507','76561199790876689','76561199785780468','76561199791415509','76561199785825643','76561199792122981',
    '76561199791523409','76561199785856576','76561199786136066','76561199791266772','76561199792236968','76561199792103070',
    '76561199791725222','76561199791440279','76561199791036501','76561199792074247','76561199792463152','76561199791171849',
    '76561199791559795','76561199791339654','76561199785676727','76561199786816818','76561199791442983','76561199786456818',
    '76561199791793648','76561199792721114','76561199791697311','76561199785251824','76561199791502842','76561199788119982',
    '76561199791704503','76561199791515489','76561199790594505','76561199791258238','76561199792235175','76561199791996177',
    '76561199791252691','76561199791468390','76561199790897867','76561199791385725','76561199790830262','76561199790837688',
    '76561199791315398','76561199790439678','76561199791853811','76561199791131413','76561199792406775','76561199786141993',
    '76561199791278717','76561199789653879','76561199791927850','76561199788057973','76561199791676831','76561199790688077',
    '76561199791990420','76561199787772365','76561199790943506','76561199791140840','76561199790998280','76561199792033495',
    '76561199785646914','76561199791836725','76561199787145857','76561199786367091','76561199787574035','76561199791440341',
    '76561199791645450','76561199787732138','76561199791278189','76561199792063213','76561199791124465','76561199791672844',
    '76561199785949419','76561199791403859','76561199790742806','76561199790486657','76561199791383261','76561199791490567',
    '76561199791628696','76561199790726632','76561199787233037','76561199791261375','76561199791605276','76561199786503468',
    '76561199791606495','76561199792124380','76561199787574035','76561199791252691','76561199791440279','76561199791036501',
    '76561199791475304','76561199791440341','76561199792074247','76561199790936401','76561199791864055','76561199788341733',
    '76561199788697284','76561199790748829','76561199791969593','76561199792027205','76561199787772365','76561199790688077',
    '76561199791990420','76561199791676831','76561199785928208','76561199791665641','76561199786367091','76561199787145857',
    '76561199791996177','76561199790636985','76561199791597391','76561199791064834','76561199790439678','76561199788119982',
    '76561199792001727','76561199791857075','76561199787585817','76561199791475647','76561199787389663','76561199791375497',
    '76561199791388383','76561199790842355','76561199792320894','76561199788057973','76561199792033495','76561199785646914',
    '76561199791140840','76561199791853811','76561199791131413','76561199790998280','76561199791315398','76561199790830262',
    '76561199790837688','76561199791704503','76561199792235175','76561199790943506','76561199791468390','76561199791385725',
    '76561199791646003','76561199787710757','76561199791505147','76561199791258238','76561199791515489','76561199790594505',
    '76561199791836725','76561199792115379','76561199788058133','76561199790897867','76561199791927850','76561199792406775',
    '76561199786141993','76561199791278717','76561199789653879','76561199790486203','76561199792182472','76561199792095582',
    '76561199786368556','76561199791900929','76561199786998867','76561199792296996','76561199791563607','76561199785626156',
    '76561199791717328','76561199791899914','76561199791188003','76561199792862125','76561199791450059','76561199792013622',
    '76561199790863398','76561199791475647','76561199787389663','76561199791375497','76561199792333482','76561199791730463',
    '76561199791109718','76561199791899914','76561199791188003','76561199791388383','76561199786777959','76561199786984240',
    '76561199792862125','76561199791475304','76561199791646003','76561199496984331','76561199791668640','76561199790954226',
    '76561199158646591','76561199791508183','76561199791493670','76561199784914055','76561199792418398','76561199791497540',
    '76561199790383993','76561199792152330','76561199791447843','76561199792482850','76561199785413002','76561199791293778',
    '76561199792983815','76561199793050498','76561199792687297','76561199792194706','76561199791739458','76561199790954915',
    '76561199785903854','76561199792384399','76561199785595506','76561199791945043','76561199791877302','76561199791516363',
    '76561199791579413','76561199786100761','76561199791684258','76561199791622821','76561199786090227','76561199792363166',
    '76561199792021210','76561199791759199','76561199792522628','76561199792214495','76561199792019732','76561199791537787',
    '76561199791894651','76561199791203986','76561199791980554','76561199791262683','76561199785940591','76561199791268592',
    '76561199790574150','76561199791469956','76561199791339498','76561199791998910','76561199791598989','76561199791176680',
    '76561199790228302','76561199791415555','76561199790135146','76561199792053291','76561199791244574','76561199791576027',
    '76561199792285466','76561199791864404','76561199785529106','76561199791890508','76561199791512282','76561199792102813',
    '76561199786041839','76561199791880391','76561199791821992','76561199792250827','76561199791413602','76561199791141293',
    '76561199792409758','76561199791800594','76561199791892028','76561199791501769','76561199792257548','76561199791898697',
    '76561199791812824','76561199791834922','76561199786383732','76561199791153351','76561199792376641','76561199791910554',
    '76561199785520172','76561199785903854','76561199792384399','76561199785595506','76561199791310041','76561199791202450',
    '76561199791310041','76561199791357378','76561199792019732','76561199791202450','76561199792384399','76561199786312834',
    '76561199791383089','76561199791603588','76561199792214495','76561199785903854','76561199791609056','76561199791537787',
    '76561199791426153','76561199791711035','76561199785595506','76561199791739458','76561199792418398','76561199792598600',
    '76561199792482850','76561199790383993','76561199792152330','76561199791497540','76561199792027244','76561199791340227',
    '76561199791841970','76561199791019694','76561199792485306','76561199791305777','76561199784891745','76561199792255404',
    '76561199791520643','76561199790940002','76561199791573811','76561199791980255','76561199791481874','76561199792553874',
    '76561199785398643','76561199785477051','76561199785117212','76561199792060408','76561199791966129','76561199791928521',
    '76561199790937632','76561199791429582','76561199791577479','76561199785520720','76561199790956639','76561199791792087',
    '76561199792493041','76561199791787575','76561199792235390','76561199791411517','76561199785879213','76561199791639758',
    '76561199791906034','76561199792553440','76561199791362109','76561199791895680','76561199792339517','76561199791632328',
    '76561199791743930','76561199792164068','76561199791556076','76561199785671970','76561199791690899','76561199785398643',
    '76561199791305777','76561199790940002','76561199791573811','76561199791520643','76561199785436789','76561199785191429',
    '76561199785477051','76561199792127121','76561199790937632','76561199791577479','76561199785130840','76561199792553874',
    '76561199792255404','76561199791980255','76561199785520720','76561199791709733','76561199784891745','76561199791481874',
    '76561199792523425','76561199791928521','76561199785117212','76561199792235390','76561199792493041','76561199785613751',
    '76561199791787575','76561199785058250','76561199790956639','76561199785943177','76561199792608626','76561199791662131',
    '76561199791019694','76561199792027244','76561199791841970','76561199792485306','76561199790984786','76561199791429582',
    '76561199528026191','76561199527861945','76561199527823199','76561199526689078','76561199528121934','76561199526991678',
    '76561199527688166','76561199528181909','76561199527872805','76561199527872626','76561199528290591','76561199527259880',
    '76561199528092786','76561199527645995','76561199527913028','76561199527611036','76561199527804632','76561199527774971',
    '76561199527102411','76561199527885235','76561199527098345','76561199527439640','76561199527366429','76561199527998649',
    '76561199528147453','76561199527492304','76561199527747386','76561199527571540','76561199527324149','76561199527714277',
    '76561199526971631','76561199527573827','76561199527043857','76561199527329360','76561199527940269','76561199527847622',
    '76561199527756183','76561199527736274','76561199527164293','76561199527425622','76561199526710887','76561199527148765',
    '76561199527824371','76561199527421154','76561199527942619','76561199527627299','76561199527965104','76561199526902565',
    '76561199527329321','76561199527910347','76561199528013870','76561199527553848','76561199528077294','76561199791799894',
    '76561199528075215','76561199527329321','76561199527910347','76561199527856730','76561199527434356','76561199527425563',
    '76561199527484786','76561199527138723','76561199527522628','76561199527487047','76561199527917068','76561199527876539',
    '76561199528045600','76561199527511010','76561199527751379','76561199527873351','76561199527691100','76561199527574171',
    '76561199527228519','76561199526846839','76561199527697805','76561199527658986','76561199528401560','76561199527286303',
    '76561199527397891',

]

DATA_FILE = 'friend_data.json'
INIT_FILE = '.initialized'

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger("SteamFriendIDMonitor")

# Rate limiting semaphore
rate_limit_semaphore = asyncio.Semaphore(MAX_CONCURRENT_REQUESTS)

def get_profile_link(steam_id):
    """Generate Steam profile link from Steam ID"""
    return f"steamcommunity.com/profiles/{steam_id}"

async def fetch_friend_list(session, steam_id):
    """Fetch the complete friend list for a Steam account with optimized rate limiting"""
    async with rate_limit_semaphore:
        url = f"http://api.steampowered.com/ISteamUser/GetFriendList/v0001/?key={STEAM_API_KEY}&steamid={steam_id}&relationship=friend"
        profile_link = get_profile_link(steam_id)
        
        # Minimal delay for speed
        if REQUEST_DELAY > 0:
            await asyncio.sleep(REQUEST_DELAY)
        
        try:
            async with session.get(url, timeout=10) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    friends_data = data.get('friendslist', {}).get('friends', [])
                    friend_ids = [friend['steamid'] for friend in friends_data]
                    return steam_id, profile_link, friend_ids
                elif resp.status == 403:
                    # Private account - return empty list instead of None for faster processing
                    return steam_id, profile_link, []
                elif resp.status == 429:
                    logger.warning(f"Rate limited for {profile_link}")
                    # Don't retry immediately, just return None and continue
                    return steam_id, profile_link, None
                else:
                    logger.warning(f"{profile_link}: API error {resp.status}")
                    return steam_id, profile_link, None
        except asyncio.TimeoutError:
            logger.warning(f"Timeout for {profile_link}")
            return steam_id, profile_link, None
        except Exception as e:
            logger.warning(f"Error fetching {profile_link}: {e}")
            return steam_id, profile_link, None

async def send_telegram_message(message):
    """Send message to Telegram, splitting if too long"""
    MAX_MESSAGE_LENGTH = 4000
    
    if len(message) <= MAX_MESSAGE_LENGTH:
        await _send_single_message(message)
    else:
        lines = message.split('\n')
        current_chunk = ""
        
        for line in lines:
            if len(current_chunk + line + '\n') > MAX_MESSAGE_LENGTH:
                if current_chunk:
                    await _send_single_message(current_chunk.strip())
                    current_chunk = line + '\n'
                else:
                    await _send_single_message(line[:MAX_MESSAGE_LENGTH])
            else:
                current_chunk += line + '\n'
        
        if current_chunk:
            await _send_single_message(current_chunk.strip())

async def _send_single_message(message):
    """Send a single message to Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        'parse_mode': 'HTML'
    }
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(url, data=payload, timeout=5) as resp:
                if resp.status != 200:
                    logger.error(f"Failed to send message: {await resp.text()}")
                else:
                    logger.info("Telegram message sent successfully")
        except Exception as e:
            logger.error(f"Telegram error: {e}")

def load_previous_data():
    """Load previous friend data from file"""
    try:
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    except:
        return {}

def save_data(data):
    """Save friend data to file"""
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=2)

def is_first_run():
    """Check if this is the first run of the bot"""
    if os.path.exists(INIT_FILE):
        return False
    with open(INIT_FILE, 'w') as f:
        f.write(datetime.now().isoformat())
    return True

async def process_accounts_fast(steam_accounts):
    """Process accounts in optimized batches for speed"""
    results = []
    total_batches = (len(steam_accounts) + BATCH_SIZE - 1) // BATCH_SIZE
    
    # Use a single session for all requests to improve performance
    connector = aiohttp.TCPConnector(limit=200, limit_per_host=100)
    timeout = aiohttp.ClientTimeout(total=600, connect=10)  # 10 minute total timeout
    
    async with aiohttp.ClientSession(connector=connector, timeout=timeout) as session:
        for i in range(0, len(steam_accounts), BATCH_SIZE):
            batch = steam_accounts[i:i + BATCH_SIZE]
            batch_num = (i // BATCH_SIZE) + 1
            
            logger.info(f"Processing batch {batch_num}/{total_batches} ({len(batch)} accounts)")
            batch_start = time.time()
            
            # Process batch concurrently
            tasks = [fetch_friend_list(session, steam_id) for steam_id in batch]
            batch_results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # Process results
            successful = 0
            for result in batch_results:
                if not isinstance(result, Exception) and result[2] is not None:
                    results.append(result)
                    successful += 1
            
            batch_time = time.time() - batch_start
            logger.info(f"Batch {batch_num} completed in {batch_time:.1f}s, {successful}/{len(batch)} successful")
            
            # Short delay between batches only if we have more batches
            if i + BATCH_SIZE < len(steam_accounts) and BATCH_DELAY > 0:
                await asyncio.sleep(BATCH_DELAY)
    
    return results

async def check_accounts():
    """Main function to check all accounts for friend changes - optimized for speed"""
    first_run = is_first_run()
    previous_data = load_previous_data()
    current_data = {}
    all_new_friends = []
    
    logger.info(f"Starting FAST friend check for {len(STEAM_ACCOUNTS)} accounts...")
    start_time = time.time()
    
    # Process all accounts with optimized batching
    results = await process_accounts_fast(STEAM_ACCOUNTS)
    
    processing_time = time.time() - start_time
    logger.info(f"Completed processing {len(results)} accounts in {processing_time:.2f} seconds")
    logger.info(f"Processing rate: {len(results)/processing_time:.1f} accounts/second")

    # Process results quickly
    for steam_id, profile_link, friend_ids in results:
        if friend_ids is None:
            continue
            
        current_data[steam_id] = {
            'profile_link': profile_link,
            'friends': friend_ids,
            'count': len(friend_ids)
        }
        
        # Skip change detection on first run
        if first_run or steam_id not in previous_data:
            continue
            
        previous_friends = set(previous_data[steam_id].get('friends', []))
        current_friends = set(friend_ids)
        
        # Check for new friends only
        new_friends = current_friends - previous_friends
        if new_friends:
            for friend_id in new_friends:
                friend_profile_link = get_profile_link(friend_id)
                all_new_friends.append(friend_profile_link)

    # Send notifications
    if all_new_friends and not first_run:
        if len(all_new_friends) == 1:
            msg = f"New friend: {all_new_friends[0]}"
        else:
            msg = f"New friends detected ({len(all_new_friends)}):\n\n"
            msg += "\n".join([f"• {friend_link}" for friend_link in all_new_friends])
        
        await send_telegram_message(msg)
        logger.info(f"Sent notification for {len(all_new_friends)} new friends")

    # Save data
    save_data(current_data)

    # Final statistics
    total_time = time.time() - start_time
    successful_accounts = len(current_data)
    failed_accounts = len(STEAM_ACCOUNTS) - successful_accounts
    total_friends = sum(data['count'] for data in current_data.values())
    
    logger.info(f"=== FINAL STATS ===")
    logger.info(f"Total time: {total_time:.2f}s")
    logger.info(f"Successful accounts: {successful_accounts}")
    logger.info(f"Failed/private accounts: {failed_accounts}")
    logger.info(f"Total friends tracked: {total_friends}")
    logger.info(f"New friends found: {len(all_new_friends)}")
    logger.info(f"Average processing rate: {successful_accounts/total_time:.1f} accounts/second")

if __name__ == '__main__':
    asyncio.run(check_accounts())
