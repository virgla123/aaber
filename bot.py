import os
import json
import asyncio
import aiohttp
import logging
from datetime import datetime
import random
import time

# Configuration
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN', '')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID', '')
STEAM_API_KEY = os.environ.get('STEAM_API_KEY', '')


STEAM_ACCOUNTS = [

    
    '76561199439232924','76561199437315148',
    '76561199370442120','76561199376259976','76561199442992514','76561199422866221',
    '76561199371384511','76561199444007754','76561199376333122','76561199385174708','76561199376231456','76561199436039640',
    '76561199567429048','76561199435562102','76561199376177541','76561199376077570','76561199443514777',
    '76561199393175860','76561199375916779',
    '76561199441897041','76561199443682764','76561199438374094','76561199439709202','76561199376204563',
    '76561199443254879','76561199438571951','76561199442806079',
    '76561199434845161','76561199424275491','76561199434842936','76561199441605843','76561199404790155','76561199405228371',
    '76561199416592488','76561199405082116','76561199442022128','76561199372920303','76561199434855530','76561199435186266',
    '76561199394717896','76561199405116705','76561199393770489','76561199434842936','76561199404536478',
    '76561199440524847','76561199233518558','76561199446818307','76561199404971171','76561199214478296',
    '76561199442600407','76561199440800308','76561199285626957','76561199439386897','76561199395286530','76561199405228371',
    '76561199404781649','76561199392189555','76561199425424436','76561199404710863','76561199442368171','76561199371741399',
    '76561199443160128','76561199330746345','76561199423050694','76561199405295532','76561199370281123','76561199268156938',
    '76561199405067338','76561199404647002','76561199439990839','76561199405090881','76561199132573781','76561199441599692',
    '76561199443562228','76561199405078917','76561199176050121','76561199435031474','76561199440733051','76561199441824491',
    '76561199443711151','76561199405317257','76561199439386897','76561199440800308','76561199285626957','76561199439866130',
    '76561199440800308','76561199285626957','76561199440667328','76561199395286530','76561199442176292','76561199256508848',
    '76561199406869720','76561199404959682','76561199439386897','76561199442600407','76561199436328913','76561199405158192',
    '76561199394043947','76561199229042013','76561199435561738','76561199352707593','76561199405029173','76561199405003949',
    '76561199439150415','76561199405003005','76561199439101365','76561199442229051','76561199442058653','76561199267804147',
    '76561199443619131','76561199024471670','76561199439874070','76561199442454433','76561199441916310','76561199267660180',
    '76561199442276849','76561199441944808','76561199441924956','76561199404722500','76561199267580118','76561199442469381',
    '76561199439514111','76561199404627167','76561199392002707','76561199405078344','76561199435939166','76561199443061489',
    '76561199441560910','76561199405379847','76561199437368407','76561199441647217','76561199404734276','76561199267660180',
    '76561199442276849','76561199416578239','76561199441924956','76561199404722500','76561199439641359','76561199442622127',
    '76561199441882546','76561199443230379','76561199442189206','76561199439150415','76561199405003005','76561199439101365',
    '76561199441647217','76561199416068815','76561199440642037','76561199405258465','76561199404734276','76561199440733502',
    '76561199443022777','76561199442915059','76561199405379847','76561199442052654','76561199443496290','76561199416578239',
    '76561199441910454','76561199405303017','76561199443359793','76561199404798621','76561199388678529','76561199404890519',
    '76561199383932354','76561199405020872','76561199285660683','76561199438856481','76561199176050121','76561199438856481',
    '76561199441647217','76561199404734276','76561199405379847','76561199437368407','76561199422696446','76561199441560910',
    '76561199443496290','76561199404966126','76561199404456787','76561199441898476','76561199440940431','76561199405168551',
    '76561199404890519','76561199383932354','76561199443120505','76561199443562228','76561199405037720','76561199443679582',
    '76561199405020872','76561199404913401','76561199376245336','76561199376148812','76561199466438728','76561199443542896',
    '76561199441910454','76561199405303017','76561199388678529','76561199442345550','76561199442176292','76561199256508848',
    '76561199285292740','76561199442856183','76561199392002707','76561199441922706','76561199441019732','76561199401086140',
    '76561199404871708','76561199441297379','76561199405020872','76561199405082202','76561199405372631','76561199439939031',
    '76561199404949511','76561199405158192','76561199442091813','76561199376148812','76561199466438728','76561199443542896',
    '76561199285660683','76561199442091813','76561199285989004','76561199439970949','76561199443275790','76561199405294340',
    '76561199442157554','76561199442201867','76561199434980308','76561199389653077','76561199439866130','76561199438295824',
    '76561199443359793','76561199404798621','76561199439298967','76561199404984050','76561199444793320','76561199441926176',
    '76561199439632181','76561199388359614','76561199379316956','76561199443085552','76561199442896865','76561199388984356',
    '76561199416597150','76561199443572284','76561199405414458','76561199445888191','76561199441716070','76561199404966126',
    '76561199439515208','76561199441659146','76561199440031754','76561199442149719','76561199439310396','76561199404996286',
    '76561199441870105','76561199442893249','76561199377039992','76561199440930445','76561199443149716','76561199442289358',
    '76561199443395247','76561199437672212','76561199442100806','76561199257344632','76561199442704279','76561199440852405',
    '76561199023016686','76561199443015724','76561199375362739','76561199441874758','76561199440593678','76561199442335481',
    '76561199405154999','76561199438961902','76561199446417760','76561199441749104','76561199378497514','76561199443424303',
    '76561199443047038','76561199377039992','76561199437672212','76561199440930445','76561199441870105','76561199442335481',
    '76561199439310396','76561199404996286','76561199439632181','76561199388984356','76561199443572284','76561199443085552',
    '76561199442896865','76561199416597150','76561199405414458','76561199445888191','76561199440031754','76561199441659146',
    '76561199218567141','76561199438309480','76561199240776268','76561199446099196','76561199380390197','76561199442235793',
    '76561199439927308','76561199434835272','76561199405092460','76561199346965630','76561199234120870','76561199444045925',
    '76561199416144546','76561199439166777','76561199388159971','76561199441209431','76561199243509316','76561199405132722',
    '76561199440869780','76561199404444232','76561199435710668','76561199442800942','76561199443870075','76561199380246133',
    '76561199388159971','76561199439166777','76561199405058401','76561199440869780','76561199422826663','76561199405069410',
    '76561199442858229','76561199416144546','76561199435710668','76561199442800942','76561199405132722','76561199442227092',
    '76561199444045925','76561199439768028','76561199439546013','76561199369345938','76561199442711773','76561199214600669',
    '76561199443288735','76561199439860569','76561199404444232','76561199443424303','76561199442247388','76561199442203157',
    '76561199441297379','76561199441922706','76561199401086140','76561199253980645','76561199441019732','76561199404945669',
    '76561199443121584','76561199405446565','76561199442794653','76561199257082232','76561199443232485','76561199443333777',
    '76561199440985525','76561199441155303','76561199439514111','76561199404627167','76561199442527935','76561199439607573',
    '76561199445045096','76561199441922706','76561199441019732','76561199443121584','76561199439650571','76561199440668114',
    '76561199405327723','76561199376153212','76561199404945669','76561199434853315','76561199240776268','76561199380390197',
    '76561199401086140','76561199253980645','76561199405041962','76561199442532398','76561199267807536','76561199442235793',
    '76561199213029794','76561199214590791','76561199440668114','76561199214886401','76561199228973343',
    '76561199240729494','76561199267660613','76561199012254922','76561199233888115','76561199240782281','76561199176071487',
    '76561199191822734','76561199176514132','76561199192218019','76561199240729494','76561199213029794',
    '76561199214590791','76561199214886401','76561199438309480','76561199434835272','76561199439760327',
    '76561199441428778','76561199446521986','76561199446765074','76561199446526854','76561199446500764','76561199446208319',
    '76561199445795416','76561199444789424','76561199445549744','76561199446151978','76561199441804979','76561199441570253',
    '76561199447063172','76561199439674404','76561199445619763','76561199446114877','76561199446506822','76561199446449675',
    '76561199440562272','76561199445165787','76561199445555124','76561199446602970','76561199436804129','76561199441894564',
    '76561199441518293','76561199437531536','76561199439727831','76561199445314210','76561199446275827','76561199444967519',
    '76561199445382435','76561199446017527','76561199446416162','76561199443639592','76561199445394247','76561199446174131',
    '76561199443950027','76561199446166760','76561199444355745','76561199437654822','76561199439206764','76561199447339695',
    '76561199447077130','76561199445165787','76561199445789791','76561199447063172','76561199445555124','76561199444492691',
    '76561199436332692','76561199445414514','76561199444521144','76561199445776365','76561199441861018','76561199376834744',
    '76561199445304500','76561199442151591','76561199446121311','76561199445510983','76561199439210939','76561199446744030',
    '76561199441436867','76561199446099786','76561199443493176','76561199446242836','76561199442167681','76561199445568536',
    '76561199437805860','76561199436412951','76561199439615041','76561199445315295','76561199446751464','76561199445942166',
    '76561199439288582','76561199446212886','76561199441428778','76561199441785708','76561199439674404','76561199446487302',
    '76561199441882944','76561199444326822','76561199446174726','76561199445721978','76561199440562272','76561199445481612',
    '76561199441833484','76561199445619763','76561199446114877','76561199446506822','76561199446469652','76561199441894564',
    '76561199446449675','76561199446679834','76561199445740780','76561199378791380','76561199369739543','76561199446595694',
    '76561199443658219','76561199445462176','76561199445776365','76561199442167681','76561199444969390','76561199445635966',
    '76561199447105022','76561199442965739','76561199445792090','76561199446584763','76561199445838719','76561199445510983',
    '76561199445529293','76561199442874114','76561199445927166','76561199440358983','76561199446751464','76561199445568536',
    '76561199437805860','76561199436412951','76561199439288582','76561199445942166','76561199439615041','76561199446212886',
    '76561199436617981','76561199445410161','76561199446035979','76561199445734740','76561199444648225',
    '76561199446860867','76561199446057025','76561199446113410','76561199441916863','76561199446524441','76561199445424244',
    '76561199445166637','76561199445312516','76561199446627731','76561199445681666','76561199445626485','76561199445252826',
    '76561199441076541','76561199446431511','76561199445315295','76561199442154385','76561199446415788','76561199443876504',
    '76561198318533648','76561198984187653','76561199000166125','76561199446503027','76561199447118700','76561199446202231',
    '76561199465755680','76561198843256060','76561199445325395','76561199436407503','76561199445512039',
    '76561199266713667','76561199443765323','76561199438109691','76561199443314910','76561199445208970','76561199446227345',
    '76561199443242397','76561199446376519','76561199446551319','76561199444165382','76561199446410540','76561199446524541',
    '76561199445992780','76561199445864171','76561199445597380','76561199447044617','76561199446435332','76561198414178474',
    '76561198808496960','76561198378952217','76561198991098980','76561198991393243','76561198855305321','76561198991832700',
    '76561198807179459','76561198396530119','76561199046121017','76561198991839275','76561198447518392','76561199230676890',
    '76561199475544227','76561199133418244','76561198991295992','76561198991347585','76561198121592392','76561198098929109',
    '76561199474501950','76561198161171164','76561199067710498','76561199093208394','76561199476659190','76561199240034073',
    '76561198991114116','76561198991358283','76561198991386268','76561198427144188','76561199245000815','76561199004584880',
    '76561199262462726','76561198991199268','76561199351908373','76561199143693666','76561199021581210','76561198124833359',
    '76561199042658364','76561199188606389','76561198435353299','76561198353235958','76561198351268289','76561198992348813',
    '76561199240034073','76561199021581210','76561198991114116','76561198991358283','76561198991832700','76561198399199812',
    '76561199123619968','76561198114096119','76561198378952217','76561198803622354','76561198991472451','76561199351908373',
    '76561198991839275','76561199046121017','76561198396530119','76561198382157048','76561198808496960','76561198991393243',
    '76561198991098980','76561198807179459','76561198855305321','76561198067332843','76561198991516650','76561199041361081',
    '76561199407379368','76561199242922897','76561199225281812','76561198880170733','76561199106128168','76561199123560671',
    '76561198991241325','76561198873285494','76561198991471238','76561198991809830','76561199093208394','76561199143693666',
    '76561198447518392','76561198357377473','76561199182967919','76561199100490555','76561198024786156','76561198991533698',
    '76561199004584880','76561199182545176','76561199188178881','76561199446753450','76561199441875577','76561199445397192',
    '76561198991614629','76561198102818581','76561198991527133','76561198991417932','76561198991439150','76561198991253715',
    '76561198991902128','76561199259869070','76561198805056748','76561198945063425','76561198990561252','76561198991542054',
    '76561198991566707','76561198991530037','76561198991464013','76561198991464691','76561198991673121','76561198991081174',
    '76561198991675697','76561198991077037','76561198991579373','76561198991188326','76561199237172673','76561198427144188',
    '76561198991550468','76561198829952463','76561198370108322','76561198382950790','76561199197777499','76561198991493331',
    '76561198991241171','76561198991839275','76561198991098980','76561198991832700','76561199143693666','76561198807179459',
    '76561199351908373','76561198808496960','76561198991393243','76561198855305321','76561199046121017','76561199240034073',
    '76561198991451384','76561198298861935','76561198959372284','76561198991203496','76561198991507615','76561199048220160',
    '76561199160131939','76561198990962671','76561198991586662','76561199064627746','76561199231794362','76561198991483931',
    '76561198102818581','76561199407518771','76561198970542159','76561198991194433','76561198990792333','76561198991550468',
    '76561199237172673','76561198991425672','76561198991417932','76561198991614629','76561198991421961','76561199041671908',
    '76561198991464013','76561198991081174','76561198255356856','76561198991566707','76561198991542054','76561198945063425',
    '76561198991673121','76561198410190615','76561198991514966','76561198991527133','76561199258355572','76561198447518392',
    '76561199404939338','76561199439791372','76561199405011027','76561199440673390','76561199404990963','76561198396530119',
    '76561199021581210',

    
    
    '76561198991377201', '76561198990952838', '76561198991203789', '76561198991461281', '76561198991248135',
    '76561198990969521', '76561198991127592', '76561198991795252', '76561198991279799', '76561198991300503',
    '76561198991161919', '76561198991040871', '76561198991397713', '76561198991379863', '76561198991552866',
    '76561198990863874', '76561198991242607', '76561198991203789', '76561198991397713', '76561198991279799',
    '76561198991294475', '76561198991712315', '76561198991402939', '76561198991198681', '76561198991584835',
    '76561198991035543', '76561198991547255', '76561198991057972', '76561198991226872', '76561198991027278',
    '76561198990985872', '76561198991281956', '76561198990808354', '76561198991098685', '76561198991474357',
    '76561198991470762', '76561198991320182', '76561198991550984', '76561198991308274', '76561198991116394',
    '76561198991068767', '76561198991167652', '76561198991183088', '76561198991317706', '76561198991146081',
    '76561198991250364', '76561198991003409', '76561198991103392','76561198991296575', '76561198991068767',
    '76561198991624128', '76561198990802707', '76561198990906165', '76561198991063842','76561198991258589',
    '76561198990802707', '76561198991203116', '76561198990906165', '76561198991322928', '76561198991436515',
    '76561198991160868', '76561198991250852', '76561198991144111', '76561198990897248', '76561198991024363',
    '76561198991314502', '76561198991390080', '76561198991453348', '76561198991150418', '76561198991189775',
    '76561198991181796', '76561198991166056', '76561198991081546', '76561198991138122', '76561198991318743',
    '76561198991231844', '76561198991043038', '76561198991269286', '76561198990799106', '76561198991398395',
    '76561198990903503', '76561198991390127', '76561198991848779', '76561198991072866', '76561198991646164',
    '76561198991063417', '76561198991270143', '76561198991760204', '76561198991279720', '76561198991114013',
    '76561198991483451', '76561198991337419', '76561198991647959', '76561198991008444', '76561198991568783',
    '76561198991633394', '76561198991327656', '76561198991043410', '76561198991028845', '76561198991243167',
    '76561198991287313', '76561198991237571', '76561198991137664', '76561198991094902', '76561198991176934',
    '76561198991337306', '76561198991040455', '76561198991326623', '76561198991220788', '76561198991250698',
    '76561198991221576', '76561198991093149', '76561198991125031', '76561198991552133', '76561198991283532',
    '76561198991155832', '76561198990842663', '76561198991044956', '76561198991393379', '76561198991359244',
    '76561198991160314', '76561199404795959', '76561198991332262', '76561198991343365',
    '76561198991779023', '76561198991524144', '76561198991176320', '76561198991699197', '76561198990922122',
    '76561198991144153', '76561198990998261', '76561198991083050', '76561198991158944', '76561198991011263',
    '76561198991026816', '76561198991357094', '76561198991460124', '76561198991062207', '76561198991215745',
    '76561198992047093', '76561198991052969', '76561198991305685', '76561198991342338', '76561198991305609',
    '76561198991646383', '76561198990984514', '76561198991336718', '76561198991272168','76561198991159989'
    '76561198990891257','76561198990842663','76561198991393379','76561198991338025','76561198990428868',
    '76561198991044956', '76561198991244602', '76561198991228786', '76561198991156468', '76561198991660858',
    '76561198991422981', '76561198991188094', '76561198990834369', '76561198991595593', '76561198991259301',
    '76561198991588536', '76561198991155832', '76561198991170863', '76561198991232191','76561198991338025',
    '76561198991037522', '76561198991169032', '76561198991359244', '76561198990922122', '76561198991160314',
    '76561198990980553', '76561198991000513', '76561198991108300', '76561198990906165', '76561198990933351',
    '76561198991322928', '76561198991250852', '76561198991160868', '76561198991144823', '76561198991504802',
    '76561198991435727', '76561198990966654', '76561198991138122', '76561198991043038', '76561198991266226',
    '76561198991349177', '76561198991210077', '76561198991383529', '76561198990993362', '76561198991106928',
    '76561198991246142', '76561198991342372', '76561198991279720', '76561198991174538', '76561198991031765',
    '76561198991488742', '76561198991200030', '76561198990866041', '76561198991324004', '76561198990803440',
    '76561198991274933', '76561198991226757', '76561198990863261', '76561198991870843', '76561198991296229',
    '76561198991000513', '76561198991144823', '76561198991504802', '76561198990980553', '76561198991246321',
    '76561198991008444', '76561198991519874', '76561198991246321', '76561198990949828', '76561198991398704',
    '76561198991031765', '76561198991296229', '76561198991142923', '76561198991304544', '76561198991243167',
    '76561198991094902', '76561198991326623', '76561198990962426', '76561198991180876', '76561198991064138',
    '76561198990806975', '76561198991250698', '76561198990796403', '76561198991584874', '76561198991246769',
    '76561198991538330', '76561198990802707', '76561198991156994', '76561198991141150', '76561198991351373',
    '76561198991001607', '76561198991368490', '76561198991472491', '76561198991089001', '76561198991375838',
    '76561198991043804', '76561198991572274', '76561198991061971', '76561198991000954', '76561198991016654',
    '76561198991738017', '76561198991163026', '76561198991390080', '76561198991089386', '76561198991369534',
    '76561198991192312', '76561198991398395', '76561198990947361', '76561198991161107', '76561198991328346',
    '76561198991352550', '76561198991760204', '76561198991647959', '76561198991149053', '76561198991102231',
    '76561198991531435', '76561198991441814', '76561198991568783', '76561198991072537', '76561198991047376',
    '76561198991519024', '76561198991269286', '76561198991162727', '76561198991373580', '76561198991287313',
    '76561198991531435', '76561198991760204', '76561198991287313', '76561198991028845', '76561198991357490',
    '76561198991090253', '76561198991441814', '76561198991153283', '76561198991102231', '76561198991348585',
    '76561198991082586', '76561198991125031', '76561198991254302', '76561198991093149', '76561198991132260',
    '76561198991624128', '76561198991285052', '76561198990850101', '76561198991596772', '76561198991004591',
    '76561198991270734', '76561198991536951', '76561198991324307', '76561198991219850', '76561198991231844',
    '76561198991003380', '76561198991353417', '76561198991133079', '76561198991144111', '76561198991518836',
    '76561198991137652', '76561198991203116', '76561198990896805', '76561198991060549', '76561198991776659',
    '76561198990854593', '76561198991776659', '76561198991285052', '76561198990850101', '76561198991553058',
    '76561198990964336', '76561198991221576', '76561198990978474', '76561198991430412', '76561198991085006',
    '76561198991337306', '76561198990823751', '76561198991509962', '76561198990824882', '76561198991083122',
    '76561198990950080', '76561198991285305', '76561198991559604', '76561198991453623', '76561198991272786',
    '76561198991190096', '76561198991337419', '76561198991467689', '76561198991114013', '76561198991479964',
    '76561198991278512', '76561198991042071', '76561198991043410', '76561198991176934', '76561198991026028',
    '76561198991013042', '76561198991546187', '76561198991269969', '76561198991072866', '76561198991848779',
    '76561198991040455', '76561198990922910', '76561198991390127', '76561198991241314', '76561198991648870',
    '76561198990850952', '76561198991401191','76561198991283532','76561198991200030','76561198990960934',
    '76561198991336243', '76561198991606947', '76561198990799106', '76561198991623935', '76561198991436515',
    '76561198991758698', '76561198990983529', '76561198991295248', '76561198990897248', '76561198991175161',
    '76561198991148172','76561198991552133','76561198991700731','76561198991705478','76561198991078973',
    '76561198990897248', '76561198991024363', '76561198991366512', '76561198991181630', '76561198991314502',
    '76561198991327043', '76561198991545088', '76561198991062463', '76561198991140962', '76561198991453348',
    '76561198991189775', '76561198991181796', '76561198991166056', '76561198990990597', '76561198991102933',
    '76561198991081546', '76561198991177706', '76561198991395578', '76561198991318743', '76561198990799106',
    '76561198991093346', '76561198991336243', '76561198991606947', '76561198990903503', '76561198991441592',
    '76561198991021307', '76561198991085722', '76561198990847143', '76561198991226836', '76561198991646164',
    '76561198991526078', '76561198991063417', '76561198991154552', '76561198991148611', '76561198991058802',
    '76561198991195303', '76561198991547937', '76561198990911287', '76561198990993271', '76561198991156736',
    '76561198991547937', '76561198991354299', '76561198991327656', '76561198991250860', '76561198991298739',
    '76561198991333505', '76561198991295365', '76561198991166163', '76561198991228801', '76561198991216382',
    '76561198991038045', '76561198991237571', '76561198991506759', '76561198991177659', '76561198991290910',
    '76561198991220788', '76561198991360421', '76561198991154650', '76561198991518233', '76561198991178106',
    '76561198991062463','76561198991156620',

    
    
]


DATA_FILE = 'friend_data.json'
INIT_FILE = '.initialized'

# Optimized rate limiting configuration for speed
MAX_CONCURRENT_REQUESTS = 50  # High concurrency
REQUEST_DELAY = 0.1  # Very short delay between requests
BURST_SIZE = 100  # Allow bursts of requests
BURST_DELAY = 5  # Pause after each burst
MAX_RETRIES = 2  # Limit retries to keep speed up

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger("SteamFriendIDMonitor")

class FastRateLimiter:
    def __init__(self, max_concurrent=50, burst_size=100, burst_delay=5):
        self.semaphore = asyncio.Semaphore(max_concurrent)
        self.burst_size = burst_size
        self.burst_delay = burst_delay
        self.request_count = 0
        self.last_burst_reset = None
        self.loop = None
    
    async def acquire(self):
        if self.loop is None:
            self.loop = asyncio.get_event_loop()
            self.last_burst_reset = self.loop.time()
        
        await self.semaphore.acquire()
        
        # Check if we need to pause after a burst
        self.request_count += 1
        if self.request_count >= self.burst_size:
            current_time = self.loop.time()
            time_since_reset = current_time - self.last_burst_reset
            
            if time_since_reset < self.burst_delay:
                sleep_time = self.burst_delay - time_since_reset
                logger.debug(f"Burst limit reached, sleeping for {sleep_time:.2f}s")
                await asyncio.sleep(sleep_time)
            
            self.request_count = 0
            self.last_burst_reset = self.loop.time()
        
        # Small delay to prevent hammering
        await asyncio.sleep(0.05 + random.uniform(0, 0.05))
    
    def release(self):
        self.semaphore.release()

# Rate limiter will be created inside the main function

def get_profile_link(steam_id):
    """Generate Steam profile link from Steam ID"""
    return f"steamcommunity.com/profiles/{steam_id}"

async def fetch_friend_list(session, steam_id, rate_limiter, retry_count=0):
    """Fetch the complete friend list for a Steam account with optimized rate limiting"""
    url = f"http://api.steampowered.com/ISteamUser/GetFriendList/v0001/?key={STEAM_API_KEY}&steamid={steam_id}&relationship=friend"
    profile_link = get_profile_link(steam_id)
    
    await rate_limiter.acquire()
    try:
        async with session.get(url, timeout=10) as resp:
            if resp.status == 200:
                data = await resp.json()
                friends_data = data.get('friendslist', {}).get('friends', [])
                friend_ids = [friend['steamid'] for friend in friends_data]
                return steam_id, profile_link, friend_ids
            elif resp.status == 403:
                logger.debug(f"{profile_link} is private")
                return steam_id, profile_link, None
            elif resp.status in [429, 420]:
                if retry_count < MAX_RETRIES:
                    # Exponential backoff for rate limits
                    delay = (2 ** retry_count) + random.uniform(0, 1)
                    logger.warning(f"{profile_link}: Rate limited, retrying in {delay:.2f}s")
                    await asyncio.sleep(delay)
                    return await fetch_friend_list(session, steam_id, rate_limiter, retry_count + 1)
                else:
                    logger.error(f"{profile_link}: Max retries exceeded for rate limit")
                    return steam_id, profile_link, None
            else:
                logger.warning(f"{profile_link}: API error {resp.status}")
                return steam_id, profile_link, None
    except asyncio.TimeoutError:
        logger.warning(f"Timeout fetching {profile_link}")
        return steam_id, profile_link, None
    except Exception as e:
        logger.warning(f"Error fetching {profile_link}: {e}")
        return steam_id, profile_link, None
    finally:
        rate_limiter.release()

async def send_telegram_message(message):
    """Send message to Telegram, splitting if too long"""
    MAX_MESSAGE_LENGTH = 4000
    
    if len(message) <= MAX_MESSAGE_LENGTH:
        await _send_single_message(message)
    else:
        lines = message.split('\n')
        current_chunk = ""
        
        for line in lines:
            if len(current_chunk + line + '\n') > MAX_MESSAGE_LENGTH:
                if current_chunk:
                    await _send_single_message(current_chunk.strip())
                    current_chunk = line + '\n'
                else:
                    await _send_single_message(line[:MAX_MESSAGE_LENGTH])
            else:
                current_chunk += line + '\n'
        
        if current_chunk:
            await _send_single_message(current_chunk.strip())

async def _send_single_message(message):
    """Send a single message to Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        'parse_mode': 'HTML'
    }
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(url, data=payload) as resp:
                if resp.status != 200:
                    logger.error(f"Failed to send message: {await resp.text()}")
                else:
                    logger.info("Telegram message sent successfully")
        except Exception as e:
            logger.error(f"Telegram error: {e}")

def load_previous_data():
    """Load previous friend data from file"""
    try:
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    except:
        return {}

def save_data(data):
    """Save friend data to file"""
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=2)

def is_first_run():
    """Check if this is the first run of the bot"""
    if os.path.exists(INIT_FILE):
        return False
    with open(INIT_FILE, 'w') as f:
        f.write(datetime.now().isoformat())
    return True

async def check_accounts():
    """Main function to check all accounts for friend changes - optimized for speed"""
    start_time = time.time()
    first_run = is_first_run()
    previous_data = load_previous_data()
    current_data = {}
    all_new_friends = []
    
    # Create rate limiter inside the async function
    rate_limiter = FastRateLimiter(MAX_CONCURRENT_REQUESTS, BURST_SIZE, BURST_DELAY)
    
    logger.info(f"Starting fast check for {len(STEAM_ACCOUNTS)} accounts...")
    
    # Optimized session configuration for high throughput
    connector = aiohttp.TCPConnector(
        limit=200,  # High connection pool
        limit_per_host=100,  # High per-host limit
        ttl_dns_cache=300,  # DNS cache
        use_dns_cache=True,
        keepalive_timeout=30,
        enable_cleanup_closed=True
    )
    
    timeout = aiohttp.ClientTimeout(total=15, connect=5)
    
    async with aiohttp.ClientSession(
        connector=connector, 
        timeout=timeout,
        headers={'User-Agent': 'SteamFriendMonitor/1.0'}
    ) as session:
        
        # Create all tasks at once for maximum concurrency
        tasks = [fetch_friend_list(session, steam_id, rate_limiter) for steam_id in STEAM_ACCOUNTS]
        
        # Progress tracking
        completed = 0
        total = len(tasks)
        
        # Process all requests concurrently with progress updates
        for coro in asyncio.as_completed(tasks):
            try:
                steam_id, profile_link, friend_ids = await coro
                completed += 1
                
                # Progress update every 500 accounts
                if completed % 500 == 0 or completed == total:
                    elapsed = time.time() - start_time
                    rate = completed / elapsed
                    eta = (total - completed) / rate if rate > 0 else 0
                    logger.info(f"Progress: {completed}/{total} ({completed/total*100:.1f}%) - {rate:.1f} req/s - ETA: {eta:.1f}s")
                
                if friend_ids is None:
                    continue
                    
                current_data[steam_id] = {
                    'profile_link': profile_link,
                    'friends': friend_ids,
                    'count': len(friend_ids)
                }
                
                # Skip change detection on first run
                if first_run or steam_id not in previous_data:
                    continue
                    
                previous_friends = set(previous_data[steam_id].get('friends', []))
                current_friends = set(friend_ids)
                
                # Check for new friends only
                new_friends = current_friends - previous_friends
                if new_friends:
                    for friend_id in new_friends:
                        friend_profile_link = get_profile_link(friend_id)
                        all_new_friends.append(friend_profile_link)
                        logger.info(f"New friend detected: {friend_id} added to {steam_id}")
                
                # Log removed friends (no telegram notification)
                removed_friends = previous_friends - current_friends
                if removed_friends:
                    for friend_id in removed_friends:
                        logger.debug(f"Friend removed: {friend_id} removed from {steam_id}")
                        
            except Exception as e:
                logger.error(f"Error processing task: {e}")
                completed += 1

    total_time = time.time() - start_time
    successful_accounts = len(current_data)
    avg_rate = successful_accounts / total_time if total_time > 0 else 0
    
    logger.info(f"Completed in {total_time:.2f}s - {avg_rate:.1f} accounts/sec - {successful_accounts}/{len(STEAM_ACCOUNTS)} successful")

    # Send batched notification for all new friends
    logger.info(f"Total new friends collected: {len(all_new_friends)}")
    
    if all_new_friends and not first_run:
        if len(all_new_friends) == 1:
            msg = f"New friend: {all_new_friends[0]}"
        else:
            msg = f"New friends detected ({len(all_new_friends)}):\n\n"
            msg += "\n".join([f"• {friend_link}" for friend_link in all_new_friends])
        
        logger.info(f"Sending Telegram notification for {len(all_new_friends)} new friends")
        await send_telegram_message(msg)
    elif all_new_friends and first_run:
        logger.info(f"New friends detected on first run (not sending notification): {len(all_new_friends)}")
    else:
        logger.info("No new friends detected in this cycle")

    # Save current data
    save_data(current_data)

    if first_run:
        total_accounts = len(current_data)
        private_accounts = len(STEAM_ACCOUNTS) - total_accounts
        total_friends = sum(data['count'] for data in current_data.values())
        
        logger.info(f"Steam Friend ID Monitor Setup Complete")
        logger.info(f"Monitoring {total_accounts} accounts")
        logger.info(f"Total friends being tracked: {total_friends}")
        if private_accounts > 0:
            logger.info(f"{private_accounts} accounts are private")
        logger.info("Bot will now notify when specific friends are added with their Steam IDs")
    else:
        logger.info(f"Friend check completed. Successfully processed {successful_accounts} accounts in {total_time:.2f}s")

if __name__ == '__main__':
    asyncio.run(check_accounts())
